# docker-compose.yml (VERSÃO FINAL E ROBUSTA)

services:
  # O serviço do InfluxDB, o nosso banco de dados time-series
  db:
    image: influxdb:2.7
    container_name: gcsbot-influxdb
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=user
      - DOCKER_INFLUXDB_INIT_PASSWORD=password
      - DOCKER_INFLUXDB_INIT_ORG=gcsbot_org
      - DOCKER_INFLUXDB_INIT_BUCKET=btc_data
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=my-super-secret-auth-token
    ports:
      - "8086:8086" # Porta da API do InfluxDB
    volumes:
      - influxdb_data:/var/lib/influxdb2
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # O serviço da nossa aplicação principal (o bot)
  app:
    build: .
    container_name: gcsbot-app
    depends_on:
      db:
        condition: service_healthy # Só inicia a app quando o DB estiver saudável
    # As variáveis de ambiente para a app se conectar ao InfluxDB
    environment:
      - INFLUXDB_URL=http://db:8086
      - INFLUXDB_TOKEN=my-super-secret-auth-token
      - INFLUXDB_ORG=gcsbot_org
      - INFLUXDB_BUCKET=btc_data
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
      - BINANCE_TESTNET_API_KEY=${BINANCE_TESTNET_API_KEY}
      - BINANCE_TESTNET_API_SECRET=${BINANCE_TESTNET_API_SECRET}
    volumes:
      - .:/app # Mapeia o seu código local para dentro do container para desenvolvimento

    # --- A MÁGICA ESTÁ AQUI ---
    # Este comando substitui o CMD do Dockerfile.
    # Ele mantém o container a correr indefinidamente, à espera dos seus comandos.
    command: tail -f /dev/null

volumes:
  # O volume que irá persistir os dados do InfluxDB
  influxdb_data:
